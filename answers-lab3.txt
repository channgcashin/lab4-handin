Answers Lab 3

Question 1: 
What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

Answer: The purpose of having individual handler functions for each exception/interrupt is to protect the users. More specifically to enforce kernel mode protection. We don't want the users to use a handler function that implements system calls as well as interferes with the kernel. Therefore, we need different handler functions to avoid the user messing with the kernel while also giving them the capability for these system calls.


Question 2:
Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint’s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?

Answer:
We didn't have to do or implement anything to make the user/softint prgram behave correctly. This should produce the interrupt vector 13 because the privilege level for the page fault handler is 0. Because the user program attempts to violate this privilege, the interrupt vector 13 is triggered. If the kernel allows such instructions by the user then the user could use this to insert harmful code for the kernel to read.
